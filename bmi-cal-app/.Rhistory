a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
install.packages(c("slidify","ggplot2","devtools"))
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
exit
quit
kensmooth
kernsmooth
load(kernsmooth)
load(kensmooth)
install.packages("kernsmooth")
install.packages("KernSmooth")
load("KernSmooth")
load(KernSmooth)
load.packages(KernSmooth)
library(KernSmooth)
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
ls()
library("swirl")
swirl
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
0
0
bye
info()
bye()
exit
quit
library("swirl")
rm(list=ls())
swirl()
0
bye()
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- \seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "leon")
my_name
paste(my_name, " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
play()
y
nxt
nxt()
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
library("swirl")
rm(list=ls()
)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix < my_vector
my_matrix < class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
exit
bye
bye()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_Vect <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_Vect)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(plants, n = 10)
tail(plants, n = 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
x <- 1:10
if(x > 5) {  x <- 0 }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
require(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
library(datasets)
data(iris)
?iris
head(iris)
is.na(iris$Sepal.Length)
iris
specific_vir <- iris[iris$Species = "virginica"]
specific_vir <- iris[iris$Species == "virginica"]
specific_vir <- iris[,iris$Species == "virginica"]
iris$Species
iris$Species == "virginica"
iris[,iris$Species == "virginica"]
iris[iris$Species == "virginica",]
iris_vir <- iris[iris$Species == "virginica",]
mean(iris_vir$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
mtcars
sapply(split(iris$Sepal.Length, iris$Species), mean)
sapply(mtcars$cyl, average)
sapply(split(mtcars$hp, mtcars$cyl), average)
sapply(split(mtcars$hp, mtcars$cyl), avg)
?abs
sapply(split(mtcars$hp, mtcars$cyl), mean)
qn4 <- sapply(split(mtcars$hp, mtcars$cyl), mean)
qn4
abs$8
qn4$8
qn4[,33
qn4[,33
qn4[,3]
qn4[,2]
qn4[3]
qn4[3] - qn4[1]
abs(qn4[3] - qn4[1])
debug(ls)
ls
undebug(ls)
Q
debug(ls)
ls
ls()
undebug(ls)
undebug()
undebug(ls)
debug(ls)
ls()
undebug(ls)
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
exit
quit
library(swirl)
install_from_swirl("Getting and Cleaning Data")
git config
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <-gather(students2, sex_class, count)
res <-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class")
)
submit()
submit()
submit()
submit()
students2
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
?separate
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymr("192012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- update(depart, hours=15, minutes=50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
Sys.setenv(http_proxy="http://uraproxy.ura.gov.sg:8080")
curl("http://www.google.com.sg")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
file.edit('~/.Renviron')
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
exit
quit
setwd('../MOOC')
setwd('modules/08-developing_data_products/shiny')
setwd('bmi-cal-app')
# submit button
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("rtools")
find_rtools()
find_rtools()
library(devtools)
find_rtools()
find_rtools(T)
get_path()
set_path()
Sys.which("gcc")
Sys.which("ls")
get_path()
